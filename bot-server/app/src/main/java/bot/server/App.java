/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bot.server;

import java.awt.Robot;
import java.awt.event.KeyEvent;

import static spark.Spark.*;

public class App {

    enum BOT_MODE {
        FOLLOW,
        HEAL_TEAMMATE,
        HEAL_GROUP,
        ASSIST,
        IDLE
    }

    private static BOT_MODE botMode = BOT_MODE.IDLE;

    private static int healCounter = 0;
    private static final int healReset = 15 / 2;

    private static int attackCounter = 0;
    private static final int attackReset = 15 / 2;

    public static void main(String[] args) {
        System.out.println("Listening for incomming commands...");

        get("/command/:function", (req, res) -> {
            String command = req.params(":function");
            System.out.println("Got command " + command);
            switch (command) {
                // Follow
                case "F1": {
                    botMode = BOT_MODE.FOLLOW;
                    keyClick(KeyEvent.VK_F2, 100);
                    keyClick(KeyEvent.VK_1, 100);
                    break;
                }
                // Teammate heal
                case "F2": {
                    resetFollow();
                    botMode = BOT_MODE.HEAL_TEAMMATE;
                    break;
                }
                // Group heal
                case "F3": {
                    resetFollow();
                    botMode = BOT_MODE.HEAL_GROUP;
                    break;
                }
                // Assist
                case "F4": {
                    resetFollow();
                    botMode = BOT_MODE.ASSIST;
                    break;
                }
                // Idle
                case "F5": {
                    resetFollow();
                    botMode = BOT_MODE.IDLE;
                    break;
                }
            }

            return res;
        });

        Thread t = new Thread(new Runnable() {
            public void run() {

                while (true) {
                    switch (botMode) {
                        case HEAL_TEAMMATE: {
                            System.out.println("HEAL_TEAMMATE. PRESSING F2");
                            keyClick(KeyEvent.VK_F2, 100);

                            if (healCounter == 0) {
                                System.out.println("HEAL_TEAMMATE. PRESSING 5");
                                keyClick(KeyEvent.VK_5, 500);
                            } else {
                                System.out.println("HEAL_TEAMMATE. PRESSING 3");
                                keyClick(KeyEvent.VK_3, 500);
                            }

                            healCounter++;

                            if (healCounter == healReset) {
                                healCounter = 0;
                            }

                            break;
                        }
                        case HEAL_GROUP: {
                            System.out.println("HEAL_GROUP. PRESSING 4");
                            keyClick(KeyEvent.VK_4, 500);
                            break;
                        }
                        case ASSIST: {
                            System.out.println("ASSIST. PRESSING 2");
                            keyClick(KeyEvent.VK_2, 100);
                            System.out.println("ASSIST. PRESSING 8");
                            keyClick(KeyEvent.VK_8, 300);

                            if (attackCounter == 0) {
                                System.out.println("ASSIST. PRESSING 7");
                                keyClick(KeyEvent.VK_7, 300);
                            } else {
                                System.out.println("ASSIST. PRESSING 6");
                                keyClick(KeyEvent.VK_6, 300);
                            }

                            attackCounter++;

                            if (attackCounter == attackReset) {
                                attackCounter = 0;
                            }

                            break;
                        }
                    }

                    try {
                        Thread.sleep(2000);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        t.start();

    }

    private static void resetFollow() {
        if (botMode == BOT_MODE.FOLLOW) {
            keyClick(KeyEvent.VK_W, 50);
            keyClick(KeyEvent.VK_S, 50);
            healCounter = 0;
            attackCounter = 0;
        }
    }

    private static void keyClick(int vkKey, long pause) {
        try {
            Robot r = new Robot();
            r.keyPress(vkKey);
            Thread.sleep(30);
            r.keyRelease(vkKey);
            Thread.sleep(pause);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
